"use strict";
// Facade
var lang_1 = require('@angular/core/src/facade/lang');
// Compiler
var compiler_1 = require('@angular/compiler');
// Animate
var browser_details_1 = require('@angular/platform-browser/src/animate/browser_details');
var animation_builder_1 = require('@angular/platform-browser/src/animate/animation_builder');
// Core
var testability_1 = require('@angular/core/src/testability/testability');
var reflection_capabilities_1 = require('@angular/core/src/reflection/reflection_capabilities');
var compiler_2 = require('@angular/compiler');
var core_1 = require('@angular/core');
// Common
var common_1 = require('@angular/common');
// Platform.Dom
var event_manager_1 = require('@angular/platform-browser/src/dom/events/event_manager');
var dom_events_1 = require('@angular/platform-browser/src/dom/events/dom_events');
var key_events_1 = require('@angular/platform-browser/src/dom/events/key_events');
var hammer_gestures_1 = require('@angular/platform-browser/src/dom/events/hammer_gestures');
var shared_styles_host_1 = require('@angular/platform-browser/src/dom/shared_styles_host');
var hammer_gestures_2 = require('@angular/platform-browser/src/dom/events/hammer_gestures');
var platform_browser_1 = require('@angular/platform-browser');
var dom_tokens_1 = require('@angular/platform-browser/src/dom/dom_tokens');
var dom_renderer_1 = require('@angular/platform-browser/src/dom/dom_renderer');
var api_1 = require('@angular/core/src/render/api');
var template_parser_1 = require('@angular/compiler/src/template_parser');
var node_dom_renderer_1 = require('./dom/node_dom_renderer');
var node_xhr_impl_1 = require('./node_xhr_impl');
var node_shared_styles_host_1 = require('./node_shared_styles_host');
var node_template_parser_1 = require('./node_template_parser');
var directives_1 = require('../directives');
var CONST_EXPR = function (v) { return v; };
var platform_server_1 = require('@angular/platform-server');
platform_server_1.Parse5DomAdapter.makeCurrent(); // ensure Parse5DomAdapter is used
var dom_adapter_1 = require('@angular/platform-browser/src/dom/dom_adapter');
var DOM = dom_adapter_1.getDOM();
function initNodeAdapter() {
    platform_server_1.Parse5DomAdapter.makeCurrent();
}
exports.initNodeAdapter = initNodeAdapter;
exports.NODE_APP_PLATFORM_MARKER = new core_1.OpaqueToken('NodeAppPlatformMarker');
exports.NODE_APP_PLATFORM = CONST_EXPR(core_1.PLATFORM_COMMON_PROVIDERS.concat([
    new core_1.Provider(exports.NODE_APP_PLATFORM_MARKER, { useValue: true }),
    new core_1.Provider(core_1.PLATFORM_INITIALIZER, { useValue: initNodeAdapter, multi: true }),
]));
function _exceptionHandler() {
    return new core_1.ExceptionHandler(dom_adapter_1.getDOM(), false);
}
function _document() {
    return dom_adapter_1.getDOM().createHtmlDocument();
}
exports.NODE_APP_COMMON_PROVIDERS = CONST_EXPR(core_1.APPLICATION_COMMON_PROVIDERS.concat(common_1.FORM_PROVIDERS, platform_browser_1.BROWSER_SANITIZATION_PROVIDERS, [
    new core_1.Provider(core_1.PLATFORM_PIPES, { useValue: common_1.COMMON_PIPES, multi: true }),
    new core_1.Provider(core_1.PLATFORM_DIRECTIVES, { useValue: common_1.COMMON_DIRECTIVES, multi: true }),
    new core_1.Provider(core_1.ExceptionHandler, { useFactory: _exceptionHandler, deps: [] })
], directives_1.NODE_PLATFORM_DIRECTIVES, [
    new core_1.Provider(dom_tokens_1.DOCUMENT, { useFactory: function () { return _document; } }),
    new core_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: dom_events_1.DomEventsPlugin, multi: true }),
    new core_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: key_events_1.KeyEventsPlugin, multi: true }),
    new core_1.Provider(event_manager_1.EVENT_MANAGER_PLUGINS, { useClass: hammer_gestures_1.HammerGesturesPlugin, multi: true }),
    new core_1.Provider(hammer_gestures_2.HAMMER_GESTURE_CONFIG, { useClass: hammer_gestures_2.HammerGestureConfig }),
    new core_1.Provider(dom_renderer_1.DomRootRenderer, { useClass: node_dom_renderer_1.NodeDomRootRenderer_ }),
    new core_1.Provider(api_1.RootRenderer, { useExisting: dom_renderer_1.DomRootRenderer }),
    new core_1.Provider(shared_styles_host_1.SharedStylesHost, { useExisting: node_shared_styles_host_1.NodeSharedStylesHost }),
    new core_1.Provider(shared_styles_host_1.DomSharedStylesHost, { useExisting: node_shared_styles_host_1.NodeSharedStylesHost }),
    node_shared_styles_host_1.NodeSharedStylesHost,
    testability_1.Testability,
    browser_details_1.BrowserDetails,
    animation_builder_1.AnimationBuilder,
    event_manager_1.EventManager
], platform_browser_1.ELEMENT_PROBE_PROVIDERS));
/**
 * An array of providers that should be passed into `application()` when bootstrapping a component.
 */
exports.NODE_APP_PROVIDERS = CONST_EXPR(exports.NODE_APP_COMMON_PROVIDERS.concat(compiler_1.COMPILER_PROVIDERS, [
    new core_1.Provider(template_parser_1.TemplateParser, { useClass: node_template_parser_1.NodeTemplateParser }),
    new core_1.Provider(compiler_1.XHR, { useClass: node_xhr_impl_1.NodeXHRImpl }),
]));
/**
 *
 */
function bootstrap(appComponentType, customAppProviders, customComponentProviders) {
    if (customAppProviders === void 0) { customAppProviders = null; }
    if (customComponentProviders === void 0) { customComponentProviders = null; }
    core_1.reflector.reflectionCapabilities = new reflection_capabilities_1.ReflectionCapabilities();
    var appProviders = exports.NODE_APP_PROVIDERS.concat([
        new core_1.Provider(dom_tokens_1.DOCUMENT, {
            useFactory: function (directiveResolver, sharedStylesHost) {
                // TODO(gdi2290): determine a better for document on the server
                var selector = directiveResolver.resolve(appComponentType);
                var serverDocument = DOM.createHtmlDocument();
                var el = DOM.createElement(selector);
                DOM.appendChild(serverDocument.body, el);
                sharedStylesHost.addHost(serverDocument.head);
                return serverDocument;
            },
            deps: [compiler_2.DirectiveResolver, node_shared_styles_host_1.NodeSharedStylesHost]
        })
    ], (lang_1.isPresent(customAppProviders) ? customAppProviders : []));
    var componentProviders = (lang_1.isPresent(customComponentProviders) ? customComponentProviders : []).slice();
    var platform = core_1.createPlatform(core_1.ReflectiveInjector.resolveAndCreate(exports.NODE_APP_PLATFORM));
    return core_1.coreLoadAndBootstrap(platform.injector, appComponentType);
}
exports.bootstrap = bootstrap;
function buildReflector() {
    core_1.reflector.reflectionCapabilities = new reflection_capabilities_1.ReflectionCapabilities();
}
exports.buildReflector = buildReflector;
function buildNodeProviders(providers) {
    return exports.NODE_APP_PLATFORM.concat((lang_1.isPresent(providers) ? providers : []));
}
exports.buildNodeProviders = buildNodeProviders;
function buildNodeAppProviders(document, providers) {
    return exports.NODE_APP_PROVIDERS.concat([
        (lang_1.isPresent(document) && document) ? [
            new core_1.Provider(dom_tokens_1.DOCUMENT, {
                useFactory: function (sharedStylesHost) {
                    sharedStylesHost.addHost(document.head);
                    return document;
                },
                deps: [node_shared_styles_host_1.NodeSharedStylesHost]
            })
        ] : []
    ], (lang_1.isPresent(providers) && providers) ? providers : []);
}
exports.buildNodeAppProviders = buildNodeAppProviders;
function buildNodePlatformProviders(appComponentType, providers) {
    return exports.NODE_APP_PLATFORM.concat((lang_1.isPresent(providers) ? providers : []));
}
exports.buildNodePlatformProviders = buildNodePlatformProviders;
//# sourceMappingURL=node.js.map